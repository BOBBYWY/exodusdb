//generated by exodus "compile start"
//#ifndef EXODUSDLFUNC_START_H
#define EXODUSDLFUNC_START_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_start;
class efb_start : public ExodusFunctorBase
{
public:

efb_start(MvEnvironment& mv) : ExodusFunctorBase("start", "exodusprogrambasecreatedelete_", mv) {}

efb_start& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in startmode0, out starttime, out startdate, out startbuffer)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,out,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_start.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_start.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (startmode0,starttime,startdate,startbuffer);

}

var operator() () {
 var startmode0_in;
 var starttime_out;
 var startdate_out;
 var startbuffer_out;
 return operator()(startmode0_in, starttime_out, startdate_out, startbuffer_out);
}

var operator() (in startmode0) {
 var starttime_out;
 var startdate_out;
 var startbuffer_out;
 return operator()(startmode0, starttime_out, startdate_out, startbuffer_out);
}

var operator() (in startmode0, out starttime) {
 var startdate_out;
 var startbuffer_out;
 return operator()(startmode0, starttime, startdate_out, startbuffer_out);
}

var operator() (in startmode0, out starttime, out startdate) {
 var startbuffer_out;
 return operator()(startmode0, starttime, startdate, startbuffer_out);
}

};
efb_start start{mv};
//#endif
