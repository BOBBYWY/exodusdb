//generated by exodus "compile monitor2b"
//#ifndef EXODUSDLFUNC_MONITOR2B_H
#define EXODUSDLFUNC_MONITOR2B_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_monitor2b;
class efb_monitor2b : public ExodusFunctorBase
{
public:

efb_monitor2b(MvEnvironment& mv) : ExodusFunctorBase("monitor2b", "exodusprogrambasecreatedelete_", mv) {}

efb_monitor2b& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in mode, in request, in tempfilename, out datax, out msg)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_monitor2b.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_monitor2b.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (mode,request,tempfilename,datax,msg);

}

var operator() () {
 var mode_in;
 var request_in;
 var tempfilename_in;
 var datax_out;
 var msg_out;
 return operator()(mode_in, request_in, tempfilename_in, datax_out, msg_out);
}

var operator() (in mode) {
 var request_in;
 var tempfilename_in;
 var datax_out;
 var msg_out;
 return operator()(mode, request_in, tempfilename_in, datax_out, msg_out);
}

var operator() (in mode, in request) {
 var tempfilename_in;
 var datax_out;
 var msg_out;
 return operator()(mode, request, tempfilename_in, datax_out, msg_out);
}

var operator() (in mode, in request, in tempfilename) {
 var datax_out;
 var msg_out;
 return operator()(mode, request, tempfilename, datax_out, msg_out);
}

var operator() (in mode, in request, in tempfilename, out datax) {
 var msg_out;
 return operator()(mode, request, tempfilename, datax, msg_out);
}

};
efb_monitor2b monitor2b{mv};
//#endif
