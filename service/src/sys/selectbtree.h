//generated by exodus "compile selectbtree"
//#ifndef EXODUSDLFUNC_SELECTBTREE_H
#define EXODUSDLFUNC_SELECTBTREE_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_selectbtree;
class efb_selectbtree : public ExodusFunctorBase
{
public:

efb_selectbtree(MvEnvironment& mv) : ExodusFunctorBase("selectbtree", "exodusprogrambasecreatedelete_", mv) {}

efb_selectbtree& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in filename, in indexid, in texts0, io msg)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in,io);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_selectbtree.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_selectbtree.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (filename,indexid,texts0,msg);

}

var operator() () {
 var filename_in;
 var indexid_in;
 var texts0_in;
 var msg_io;
 return operator()(filename_in, indexid_in, texts0_in, msg_io);
}

var operator() (in filename) {
 var indexid_in;
 var texts0_in;
 var msg_io;
 return operator()(filename, indexid_in, texts0_in, msg_io);
}

var operator() (in filename, in indexid) {
 var texts0_in;
 var msg_io;
 return operator()(filename, indexid, texts0_in, msg_io);
}

var operator() (in filename, in indexid, in texts0) {
 var msg_io;
 return operator()(filename, indexid, texts0, msg_io);
}

};
efb_selectbtree selectbtree{mv};
//#endif
