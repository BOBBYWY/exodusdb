//generated by exodus "compile ../sys/minmax"
//#ifndef EXODUSDLFUNC_MINMAX_H
#define EXODUSDLFUNC_MINMAX_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_minmax;
class efb_minmax : public ExodusFunctorBase
{
public:

efb_minmax(MvEnvironment& mv) : ExodusFunctorBase("minmax", "exodusprogrambasecreatedelete_", mv) {}

efb_minmax& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in list0, out min, out max)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_minmax.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_minmax.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (list0,min,max);

}

var operator() () {
 var list0_in;
 var min_out;
 var max_out;
 return operator()(list0_in, min_out, max_out);
}

var operator() (in list0) {
 var min_out;
 var max_out;
 return operator()(list0, min_out, max_out);
}

var operator() (in list0, out min) {
 var max_out;
 return operator()(list0, min, max_out);
}

};
efb_minmax minmax{mv};
//#endif
