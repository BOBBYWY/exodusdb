//generated by exodus "compile locking"
//#ifndef EXODUSDLFUNC_LOCKING_H
#define EXODUSDLFUNC_LOCKING_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_locking;
class efb_locking : public ExodusFunctorBase
{
public:

efb_locking(MvEnvironment& mv) : ExodusFunctorBase("locking", "exodusprogrambasecreatedelete_", mv) {}

efb_locking& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in mode, in lockfilename, in lockkey, in lockdesc0, io locklist, in ntries0, out msg)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in,in,io,in,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_locking.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_locking.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (mode,lockfilename,lockkey,lockdesc0,locklist,ntries0,msg);

}

var operator() () {
 var mode_in;
 var lockfilename_in;
 var lockkey_in;
 var lockdesc0_in;
 var locklist_io;
 var ntries0_in;
 var msg_out;
 return operator()(mode_in, lockfilename_in, lockkey_in, lockdesc0_in, locklist_io, ntries0_in, msg_out);
}

var operator() (in mode) {
 var lockfilename_in;
 var lockkey_in;
 var lockdesc0_in;
 var locklist_io;
 var ntries0_in;
 var msg_out;
 return operator()(mode, lockfilename_in, lockkey_in, lockdesc0_in, locklist_io, ntries0_in, msg_out);
}

var operator() (in mode, in lockfilename) {
 var lockkey_in;
 var lockdesc0_in;
 var locklist_io;
 var ntries0_in;
 var msg_out;
 return operator()(mode, lockfilename, lockkey_in, lockdesc0_in, locklist_io, ntries0_in, msg_out);
}

var operator() (in mode, in lockfilename, in lockkey) {
 var lockdesc0_in;
 var locklist_io;
 var ntries0_in;
 var msg_out;
 return operator()(mode, lockfilename, lockkey, lockdesc0_in, locklist_io, ntries0_in, msg_out);
}

var operator() (in mode, in lockfilename, in lockkey, in lockdesc0) {
 var locklist_io;
 var ntries0_in;
 var msg_out;
 return operator()(mode, lockfilename, lockkey, lockdesc0, locklist_io, ntries0_in, msg_out);
}

var operator() (in mode, in lockfilename, in lockkey, in lockdesc0, io locklist) {
 var ntries0_in;
 var msg_out;
 return operator()(mode, lockfilename, lockkey, lockdesc0, locklist, ntries0_in, msg_out);
}

var operator() (in mode, in lockfilename, in lockkey, in lockdesc0, io locklist, in ntries0) {
 var msg_out;
 return operator()(mode, lockfilename, lockkey, lockdesc0, locklist, ntries0, msg_out);
}

};
efb_locking locking{mv};
//#endif
