//generated by exodus "compile getdatetime"
//#ifndef EXODUSDLFUNC_GETDATETIME_H
#define EXODUSDLFUNC_GETDATETIME_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_getdatetime;
class efb_getdatetime : public ExodusFunctorBase
{
public:

efb_getdatetime(MvEnvironment& mv) : ExodusFunctorBase("getdatetime", "exodusprogrambasecreatedelete_", mv) {}

efb_getdatetime& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (out localdate, out localtime, out sysdate, out systime, out utcdate, out utctime)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(out,out,out,out,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_getdatetime.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_getdatetime.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (localdate,localtime,sysdate,systime,utcdate,utctime);

}

var operator() () {
 var localdate_out;
 var localtime_out;
 var sysdate_out;
 var systime_out;
 var utcdate_out;
 var utctime_out;
 return operator()(localdate_out, localtime_out, sysdate_out, systime_out, utcdate_out, utctime_out);
}

var operator() (out localdate) {
 var localtime_out;
 var sysdate_out;
 var systime_out;
 var utcdate_out;
 var utctime_out;
 return operator()(localdate, localtime_out, sysdate_out, systime_out, utcdate_out, utctime_out);
}

var operator() (out localdate, out localtime) {
 var sysdate_out;
 var systime_out;
 var utcdate_out;
 var utctime_out;
 return operator()(localdate, localtime, sysdate_out, systime_out, utcdate_out, utctime_out);
}

var operator() (out localdate, out localtime, out sysdate) {
 var systime_out;
 var utcdate_out;
 var utctime_out;
 return operator()(localdate, localtime, sysdate, systime_out, utcdate_out, utctime_out);
}

var operator() (out localdate, out localtime, out sysdate, out systime) {
 var utcdate_out;
 var utctime_out;
 return operator()(localdate, localtime, sysdate, systime, utcdate_out, utctime_out);
}

var operator() (out localdate, out localtime, out sysdate, out systime, out utcdate) {
 var utctime_out;
 return operator()(localdate, localtime, sysdate, systime, utcdate, utctime_out);
}

};
efb_getdatetime getdatetime{mv};
//#endif
