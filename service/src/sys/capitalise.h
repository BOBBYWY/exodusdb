//generated by exodus "compile ../sys/capitalise"
//#ifndef EXODUSDLFUNC_CAPITALISE_H
#define EXODUSDLFUNC_CAPITALISE_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_capitalise;
class efb_capitalise : public ExodusFunctorBase
{
public:

efb_capitalise(MvEnvironment& mv) : ExodusFunctorBase("capitalise", "exodusprogrambasecreatedelete_", mv) {}

efb_capitalise& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (io str0, io mode, io wordseps, io oconv_out)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(io,io,io,io);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_capitalise.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_capitalise.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (str0,mode,wordseps,oconv_out);

}

var operator() () {
 var str0_io;
 var mode_io;
 var wordseps_io;
 var oconv_out_io;
 return operator()(str0_io, mode_io, wordseps_io, oconv_out_io);
}

var operator() (io str0) {
 var mode_io;
 var wordseps_io;
 var oconv_out_io;
 return operator()(str0, mode_io, wordseps_io, oconv_out_io);
}

var operator() (io str0, io mode) {
 var wordseps_io;
 var oconv_out_io;
 return operator()(str0, mode, wordseps_io, oconv_out_io);
}

var operator() (io str0, io mode, io wordseps) {
 var oconv_out_io;
 return operator()(str0, mode, wordseps, oconv_out_io);
}

};
efb_capitalise capitalise{mv};
//#endif
