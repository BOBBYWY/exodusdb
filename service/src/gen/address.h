//generated by exodus "compile ../gen/address"
//#ifndef EXODUSDLFUNC_ADDRESS_H
#define EXODUSDLFUNC_ADDRESS_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_address;
class efb_address : public ExodusFunctorBase
{
public:

efb_address(MvEnvironment& mv) : ExodusFunctorBase("address", "exodusprogrambasecreatedelete_", mv) {}

efb_address& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in line1, in width, out addresstext)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_address.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_address.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (line1,width,addresstext);

}

var operator() () {
 var line1_in;
 var width_in;
 var addresstext_out;
 return operator()(line1_in, width_in, addresstext_out);
}

var operator() (in line1) {
 var width_in;
 var addresstext_out;
 return operator()(line1, width_in, addresstext_out);
}

var operator() (in line1, in width) {
 var addresstext_out;
 return operator()(line1, width, addresstext_out);
}

};
efb_address address{mv};
//#endif
