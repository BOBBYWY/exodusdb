//generated by exodus "compile ../gen/currexch"
//#ifndef EXODUSDLFUNC_CURREXCH_H
#define EXODUSDLFUNC_CURREXCH_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_currexch;
class efb_currexch : public ExodusFunctorBase
{
public:

efb_currexch(MvEnvironment& mv) : ExodusFunctorBase("currexch", "exodusprogrambasecreatedelete_", mv) {}

efb_currexch& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in ratedate, in fromcurrcode0, in tocurrcode0, in fromamount, out toamount, out rate, out msg)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in,in,out,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_currexch.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_currexch.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (ratedate,fromcurrcode0,tocurrcode0,fromamount,toamount,rate,msg);

}

var operator() () {
 var ratedate_in;
 var fromcurrcode0_in;
 var tocurrcode0_in;
 var fromamount_in;
 var toamount_out;
 var rate_out;
 var msg_out;
 return operator()(ratedate_in, fromcurrcode0_in, tocurrcode0_in, fromamount_in, toamount_out, rate_out, msg_out);
}

var operator() (in ratedate) {
 var fromcurrcode0_in;
 var tocurrcode0_in;
 var fromamount_in;
 var toamount_out;
 var rate_out;
 var msg_out;
 return operator()(ratedate, fromcurrcode0_in, tocurrcode0_in, fromamount_in, toamount_out, rate_out, msg_out);
}

var operator() (in ratedate, in fromcurrcode0) {
 var tocurrcode0_in;
 var fromamount_in;
 var toamount_out;
 var rate_out;
 var msg_out;
 return operator()(ratedate, fromcurrcode0, tocurrcode0_in, fromamount_in, toamount_out, rate_out, msg_out);
}

var operator() (in ratedate, in fromcurrcode0, in tocurrcode0) {
 var fromamount_in;
 var toamount_out;
 var rate_out;
 var msg_out;
 return operator()(ratedate, fromcurrcode0, tocurrcode0, fromamount_in, toamount_out, rate_out, msg_out);
}

var operator() (in ratedate, in fromcurrcode0, in tocurrcode0, in fromamount) {
 var toamount_out;
 var rate_out;
 var msg_out;
 return operator()(ratedate, fromcurrcode0, tocurrcode0, fromamount, toamount_out, rate_out, msg_out);
}

var operator() (in ratedate, in fromcurrcode0, in tocurrcode0, in fromamount, out toamount) {
 var rate_out;
 var msg_out;
 return operator()(ratedate, fromcurrcode0, tocurrcode0, fromamount, toamount, rate_out, msg_out);
}

var operator() (in ratedate, in fromcurrcode0, in tocurrcode0, in fromamount, out toamount, out rate) {
 var msg_out;
 return operator()(ratedate, fromcurrcode0, tocurrcode0, fromamount, toamount, rate, msg_out);
}

};
efb_currexch currexch{mv};
//#endif
