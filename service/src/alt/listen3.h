//generated by exodus "compile listen3"
//#ifndef EXODUSDLFUNC_LISTEN3_H
#define EXODUSDLFUNC_LISTEN3_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_listen3;
class efb_listen3 : public ExodusFunctorBase
{
public:

efb_listen3(MvEnvironment& mv) : ExodusFunctorBase("listen3", "exodusprogrambasecreatedelete_", mv) {}

efb_listen3& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (io filename, in mode, out filetitle, out triggers)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(io,in,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_listen3.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_listen3.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (filename,mode,filetitle,triggers);

}

var operator() () {
 var filename_io;
 var mode_in;
 var filetitle_out;
 var triggers_out;
 return operator()(filename_io, mode_in, filetitle_out, triggers_out);
}

var operator() (io filename) {
 var mode_in;
 var filetitle_out;
 var triggers_out;
 return operator()(filename, mode_in, filetitle_out, triggers_out);
}

var operator() (io filename, in mode) {
 var filetitle_out;
 var triggers_out;
 return operator()(filename, mode, filetitle_out, triggers_out);
}

var operator() (io filename, in mode, out filetitle) {
 var triggers_out;
 return operator()(filename, mode, filetitle, triggers_out);
}

};
efb_listen3 listen3{mv};
//#endif
