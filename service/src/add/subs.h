//generated by exodus "compile ../add/subs"
//#ifndef EXODUSDLFUNC_SUBS_H
#define EXODUSDLFUNC_SUBS_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_subs;
class efb_subs : public ExodusFunctorBase
{
public:

efb_subs(MvEnvironment& mv) : ExodusFunctorBase("subs", "exodusprogrambasecreatedelete_", mv) {}

efb_subs& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in args1, in args2, in sep)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_subs.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_subs.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (args1,args2,sep);

}

var operator() () {
 var args1_in;
 var args2_in;
 var sep_in;
 return operator()(args1_in, args2_in, sep_in);
}

var operator() (in args1) {
 var args2_in;
 var sep_in;
 return operator()(args1, args2_in, sep_in);
}

var operator() (in args1, in args2) {
 var sep_in;
 return operator()(args1, args2, sep_in);
}

};
efb_subs subs{mv};
//#endif
