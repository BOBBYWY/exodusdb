//generated by exodus "compile ../add/readhostsallow"
//#ifndef EXODUSDLFUNC_READHOSTSALLOW_H
#define EXODUSDLFUNC_READHOSTSALLOW_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_readhostsallow;
class efb_readhostsallow : private ExodusFunctorBase
{
public:

efb_readhostsallow(MvEnvironment& mv) : ExodusFunctorBase("readhostsallow", "exodusprogrambasecreatedelete_", mv) {}

efb_readhostsallow& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (out hostsallow)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_readhostsallow.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_readhostsallow.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (hostsallow);

}

var operator() () {
 var hostsallow_out;
 return operator()(hostsallow_out);
}

};
efb_readhostsallow readhostsallow{mv};
//#endif
