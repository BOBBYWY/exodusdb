//generated by exodus "compile ../add/scrnio"
//#ifndef EXODUSDLFUNC_SCRNIO_H
#define EXODUSDLFUNC_SCRNIO_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_scrnio;
class efb_scrnio : public ExodusFunctorBase
{
public:

efb_scrnio(MvEnvironment& mv) : ExodusFunctorBase("scrnio", "exodusprogrambasecreatedelete_", mv) {}

efb_scrnio& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in coln,in rown,in data,in attribute)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in,in);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_scrnio.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_scrnio.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (coln,rown,data,attribute);

}

var operator() () {
 var coln_in;
 var rown_in;
 var data_in;
 var attribute_in;
 return operator()(coln_in, rown_in, data_in, attribute_in);
}

var operator() (in coln) {
 var rown_in;
 var data_in;
 var attribute_in;
 return operator()(coln, rown_in, data_in, attribute_in);
}

var operator() (in coln, in rown) {
 var data_in;
 var attribute_in;
 return operator()(coln, rown, data_in, attribute_in);
}

var operator() (in coln, in rown, in data) {
 var attribute_in;
 return operator()(coln, rown, data, attribute_in);
}

};
efb_scrnio scrnio{mv};
//#endif
