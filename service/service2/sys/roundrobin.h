//generated by exodus "compile ../sys/roundrobin"
//#ifndef EXODUSDLFUNC_ROUNDROBIN_H
#define EXODUSDLFUNC_ROUNDROBIN_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_roundrobin;
class efb_roundrobin : private ExodusFunctorBase
{
public:

efb_roundrobin(MvEnvironment& mv) : ExodusFunctorBase("roundrobin", "exodusprogrambasecreatedelete_", mv) {}

efb_roundrobin& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in mode, in params, io result, io msg)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,io,io);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_roundrobin.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_roundrobin.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (mode,params,result,msg);

}

var operator() (in mode, in params, io result, in msg=var()) {
 var msg_io;
 if (msg.assigned()) msg_io=msg;
 return operator()(mode,params,result,msg_io);
}

var operator() (in mode, in params, in result=var(), in msg=var()) {
 var msg_io;
 if (msg.assigned()) msg_io=msg;
 var result_io;
 if (result.assigned()) result_io=result;
 return operator()(mode,params,result_io,msg_io);
}

};
efb_roundrobin roundrobin{mv};
//#endif
