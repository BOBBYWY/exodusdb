//generated by exodus "compile ../sys/btreeextract2"
//#ifndef EXODUSDLFUNC_BTREEEXTRACT2_H
#define EXODUSDLFUNC_BTREEEXTRACT2_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase efb_btreeextract2;
class efb_btreeextract2 : private ExodusFunctorBase
{
public:

efb_btreeextract2(MvEnvironment& mv) : ExodusFunctorBase("btreeextract2", "exodusprogrambasecreatedelete_", mv) {}

efb_btreeextract2& operator=(const var& newlibraryname) {
        closelib();
        libraryname_=newlibraryname.toString();
        return (*this);
}

//a member function with the right arguments, returning a var or void
var operator() (in cmd, in filename, in dictfile, out hits, out msg)
{

 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //first time link to the shared lib and create/cache an object from it
 //passing current standard variables in mv
 //if (efb_getlang.pmemberfunction_==NULL)
 // efb_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
 if (this->pmemberfunction_==NULL)
  this->init();

 //define a function type (pExodusProgramBaseMemberFunction)
 //that can call the shared library object member function
 //with the right arguments and returning a var or void
 typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)(in,in,in,out,out);

 //call the shared library object main function with the right args,
 // returning a var or void
 //return CALLMEMBERFUNCTION(*(efb_btreeextract2.pobject_),
 //((pExodusProgramBaseMemberFunction) (efb_btreeextract2.pmemberfunction_)))
 // (mode);
 return CALLMEMBERFUNCTION(*(this->pobject_),
 ((pExodusProgramBaseMemberFunction) (this->pmemberfunction_)))
  (cmd,filename,dictfile,hits,msg);

}

var operator() (in cmd, in filename, in dictfile, out hits, in msg=var()) {
 var msg_out;
 if (msg.assigned()) msg_out=msg;
 return operator()(cmd,filename,dictfile,hits,msg_out);
}

var operator() (in cmd, in filename, in dictfile, in hits=var(), in msg=var()) {
 var msg_out;
 if (msg.assigned()) msg_out=msg;
 var hits_out;
 if (hits.assigned()) hits_out=hits;
 return operator()(cmd,filename,dictfile,hits_out,msg_out);
}

};
efb_btreeextract2 btreeextract2{mv};
//#endif
