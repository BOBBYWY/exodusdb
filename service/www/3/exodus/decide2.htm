<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>

    <script type="text/javascript" src="../exodus/scripts/client.js"></script>

    <style type="text/css">
        td, th {
            padding:0px 2px;
        }
        
        .hiddenrow {

            display: none;
        }
    </style>

    <script type="text/javascript">

        var goriginalstyles = {}

        var gsearchfor = ''
        var gwindowloaded = false
        var ghidden = false

        if (!window.dialogArguments) {
            var msg='There was a problem opening a popup window.\n'
            msg+='Please configure your browser to allow pop-up windows and not to block them\n'
            msg+='\nUncheck "Block pop-up windows"\n'
            msg+='\nUncheck "Block pop-up windows"\n'
            msg+='Firefox: Tools Menu, Options, Content\n'
            msg+='Internet Explorer:  Tools Menu\n'
            msg+='Chrome: Icon in Web Address\n\n'
            msg+='\n(window.dialogArguments missing in decide2.htm)\n'
            alert(msg)
            window.onload = null
        }
        else {
            //window.onload = formfunctions_onload
            //done by client.js
            //addeventlistener(window,'load','formfunctions_onload')
            var question = window.dialogArguments[0]
            var data = window.dialogArguments[1]
            var cols = window.dialogArguments[2]
            var returncolid = window.dialogArguments[3]
            var defaultreply = window.dialogArguments[4]
            var returnmany = window.dialogArguments[5]
            var returnmany_original=returnmany
            if (returnmany=='SINGLE_OR_MANY') {
                //start out in single mode
                returnmany=false
                //enable the MANY button to switch into select many mode
                window.setTimeout('many_button.style.display=""',10)                
            }

            var xmldatabinding
            var grecords

            var returncoln = ''

            //var selectionns = []

        }

        var gtable1
        function* formfunctions_onload() {

            //document.onkeydown=document_onkeydown
            addeventlistener(document, 'keydown', 'document_onkeydown')
            gtable1=$$('table1')
            
            yield* decide2_init()

            gwindowloaded = true
            if (gsearchfor)
                searchrows(gsearchfor)

        }
    
    var gsorttable2offset=0
    function sorttable2(event) {

     //locate the current element
     event=getevent(event)

     var th=event.target
     if (th.tagName!="TH")
        return(0)

     var tableelement=th.parentElement.parentElement.parentElement
     var tablerows=tableelement.tBodies[0].getElementsByTagName('tr')
     var coln=th.cellIndex+gsorttable2offset

     var reverse=event.target.getAttribute('sorttable2_issorted')
     event.target.setAttribute('sorttable2_issorted',reverse?'':1)
     
     var rown=th.parentElement.rowIndex
     var nrows=tablerows.length
     fromrown=0
     uptorown=nrows-1

     if (gdateformat == 'M/d/yyyy')
      var dateformat=[2,0,1]
     else if (gdateformat == 'yyyy/M/d')
      var dateformat=[0,1,2]
     else //gdateformat = 'd/M/yyyy'
      var dateformat=[2,1,0]
     var yy=dateformat[0]+1
     var mm=dateformat[1]+1
     var dd=dateformat[2]+1

     var sortdata=[]
     var dateregex=/ ?(\d{4}|\d{1,2})\/ ?(\d{1,2})\/(\d{4}|\d{2})/
     var periodregex=/ ?(\d{1,2})\/(\d{4})/g
     for (var ii=fromrown;ii<=uptorown;++ii){
      var cell=tablerows[ii].cells[coln]
      var value=(cell.textContent||cell.innerText||"").toUpperCase()
      var match
      while(match=value.match(dateregex)) {
       //convert dates like n/n/yy or n/n/yyyy to sortable yyyy|mm|dd format
       value=value.replace(dateregex,('0000'+match[yy]).slice(-4)+'|'+('00'+match[mm]).slice(-2)+'|'+('00'+match[dd]).slice(-2))
       //console.log(value)
      }

      value=value.replace(periodregex,'$2|$1')

      //natural sort
      value=value.replace(/[-+]?[1234567890.,]+/g,function(x){if (x.slice(0,1)=='-') {y='-';x=x.slice(1)} else y='';return y+('0000000000000000000000'+x).slice(-20)})
      //value+=('000000000000'+ii).slice(-10)//stable sort
      //cell.setAttribute('sortvalue',value)
      sortdata.push([value,ii])
     }

     sortdata.sort(function (a,b){if (a[0]<b[0]) return -1;if (a[0]>b[0]) return 1;return a[1]-b[1]})
     if (reverse)
      sortdata.reverse()
    
     //get an array of the tablerows
     var oldrows = []
     for (var oldrown = 0; oldrown < tablerows.length; oldrown++)
      oldrows[oldrown] = tablerows[oldrown]

     //reorder table rows
     var newdatarows = []
     for (var newrown = 0; newrown < sortdata.length; ++newrown) {
      var oldrown = sortdata[newrown][1]
      if (newrown != oldrown)
       tablerows[newrown].swapNode(oldrows[oldrown])
     }
     
    }//sorttable2
    
        String.prototype.exodussplit =
function exodussplit(seps, invert) {

    var str1 = this.toString()
    if (str1 == '')
        return []

    //split the fields
    var array = str1.split(seps.slice(0, 1))

    //split the values
    if (seps.length > 1) {
        //seps=seps.slice(1)
        for (var ii = 0; ii < array.length; ii++) {
            array[ii] = array[ii].exodussplit(seps.slice(1))
        }
    }

    return array

}

        String.prototype.exoduscapitalise =
function exoduscapitalise() {
    //converts BRAND_CODE to Brand code
    var string = this.toString()
    string = string.replace(/_/g, ' ').toLowerCase()
    string = string.slice(0, 1).toUpperCase() + string.slice(1)
    return string
}

        var currentrow
        var selectedrow

        //window.onload=window_onload

        function* document_onkeydown(event) {

            event=getevent(event)

            keycode = event.keyCode
        
            //ctrl+Enter or single select
            if (keycode == 13 && event.ctrlKey) {
                ok_onclick()
                return exoduscancelevent(event)
            }

            //F9 is old save
            if (keycode == 120) {
                ok_onclick()
                return exoduscancelevent(event)
            }

            //Esc is cancel
            if (keycode == 27) {
                cancel_onclick()
                return exoduscancelevent(event)
            }

            //Alt+F=Find
            if (keycode == 70 && event.altKey) {
                find_onclick()
                return exoduscancelevent(event)
            }

            //Alt+M=Find
            if (keycode == 77 && event.altKey) {
                many_onclick()
                return exoduscancelevent(event)
            }

            //Alt+P=Print
            if (keycode == 80 && event.altKey) {
                window.print()
                return exoduscancelevent(event)
            }

            if (!currentrow)
                return

            var maxrecn
            var nextrecn = null

            var rows
            if (xmldatabinding)
                rows = gtable1.tBodies
            else
                rows = gtable1.tBodies[0].getElementsByTagName('TR')

            var recn
            var nheaderrows = 1
            if (xmldatabinding) {
                maxrecn = rows.length - 1
                recn = currentrow.recordNumber - 1
            }
            else {
                maxrecn = rows.length - 1
                recn = currentrow.rowIndex - nheaderrows
            }

            //page up
            if (keycode == 33) {
                if (event.ctrlKey) {
                    nextrecn = 0
                    while ((xmldatabinding ? rows[nextrecn].rows[0].className : rows[nextrecn].className) == 'hiddenrow') {
                        nextrecn++
                    }
                    window.scrollTo(0, 0)
                }
                else {
                    //nextrecn=recn-10
                    //if (nextrecn<0) nextrecn=0
                    nextrecn = recn
                    for (var ii = 0; ii < 10; ) {
                        nextrecn--
                        if (nextrecn < 0) {
                            nextrecn = maxrecn
                            ii = 9
                            window.scrollTo(0, 99999)
                        }
                        if ((xmldatabinding ? rows[nextrecn].rows[0].className : rows[nextrecn].className) != 'hiddenrow') ii++
                    }
                }
            }

            //page down
            if (keycode == 34) {
                if (event.ctrlKey) {
                    nextrecn = maxrecn
                    while ((xmldatabinding ? rows[nextrecn].rows[0].className : rows[nextrecn].className) == 'hiddenrow') {
                        nextrecn--
                    }
                    window.scrollTo(0, 99999)
                }
                else {
                    nextrecn = recn
                    for (var ii = 0; ii < 10; ) {
                        nextrecn++
                        if (nextrecn > maxrecn) {
                            nextrecn = 0
                            ii = 9
                            window.scrollTo(0, 0)
                        }
                        if ((xmldatabinding ? rows[nextrecn].rows[0].className : rows[nextrecn].className) != 'hiddenrow') ii++
                    }
                }
            }

            if (keycode == 13) {
                yield* clickrow(currentrow)
                //nextrecn=recn+1
                if (!returnmany) {
                    ok_onclick()
                    return exoduscancelevent(event)
                }
                keycode = 40//simulate down arrow
            }

            //up down arrows
            if (keycode == 38 || keycode == 40) {
                var direction = keycode == 38 ? -1 : 1
                nextrecn = recn
                while (true) {
                    nextrecn += direction
                    if (nextrecn < 0) nextrecn = maxrecn
                    else if (nextrecn > maxrecn) nextrecn = 0
                    if (nextrecn == 0) window.scrollTo(0, 0)
                    else if (nextrecn == maxrecn) window.scrollTo(0, 999999)
                    if ((xmldatabinding ? rows[nextrecn].rows[0].className : rows[nextrecn].className) != 'hiddenrow') break
                }
            }

            if (typeof gsearchfor == 'undefined') gsearchfor = ''
            var keychar = String.fromCharCode(keycode)
            if (!event.altKey && keychar.match(/[a-z0-9]/gi)) {
                find_onclick()
            }

            if (nextrecn != null) {

                if (nextrecn < 0)
                    nextrecn = maxrecn
                if (nextrecn > maxrecn)
                    nextrecn = 0

                if (xmldatabinding)
                    highlightrow(event, rows[nextrecn].rows[0])
                else
                    highlightrow(event, rows[nextrecn])

                //conflicts with highlightrow scrollintoview
                //if (nextrecn>(maxrecn-10)) window.scrollTo(0,99999)
                if (nextrecn == maxrecn)
                    window.scrollTo(0, 99999)
                if (nextrecn < 10)
                    window.scrollTo(0, 0)

                return exoduscancelevent(event)

            }

        }

        function many_onclick() {
            if (returnmany_original!='SINGLE_OR_MANY')
                return
            returnmany=!returnmany
            many_button.style.display=''
            many_button.value=returnmany?'Single':'Many'
        }

        function find_onclick() {
            //var gsearchfor=keychar
            var newsearchfor = prompt('Find what?', gsearchfor)
            if (newsearchfor) searchrows(newsearchfor)
        }

        function searchrows(searchfor) {

            //return nfound
            var nfound = 0

            if (searchfor) {
                gsearchfor = searchfor
                searchfor = searchfor.toUpperCase()
            }

            var rows
            if (xmldatabinding)
                rows = gtable1.tBodies
            else
                rows = gtable1.tBodies[0].getElementsByTagName('TR')

            ghidden = false

            for (var rown = rows.length - 1; rown >= 0; rown--) {

                var row
                if (xmldatabinding)
                    row = rows[rown].rows[0]
                else
                    row = rows[rown]

                if (!searchfor || row.innerText.toUpperCase().indexOf(searchfor, true) >= 0) {
                    nfound++
                    row.className = ''
                }
                else {
                    row.className = 'hiddenrow'
                    ghidden = true
                }
            }

            if (searchfor && !nfound && gwindowloaded) {
                //show all rows again
                searchrows()
                alert(gsearchfor + ' not found')
            }

            return nfound

        }

        function* rowonmouseover(event) {
            event=getevent(event)

            var row = getancestor(event.target, 'TR')
            // if (gtable1.readyState=='complete')
            highlightrow(event, row)
        }

        function highlightrow(event, row) {

            if (highlighter)
                highlighter = null

            //unhighlight the old current row
            if (currentrow)
                currentrow.style.backgroundColor = currentrow.getAttribute('oldcolor')

            if (!row)
                row = gtable1.tBodies[0].rows[0]

            //highlight new current row
            currentrow = row
            currentrow.setAttribute('oldcolor', currentrow.style.backgroundColor)
            currentrow.style.backgroundColor = 'yellow'

            if (event && event.type != 'mouseover')
                currentrow.scrollIntoView(false)

        }

        function* rowonclick(event) {
            event=getevent(event)

            var row = getancestor(event.target, 'TR')
            //row=event.target
            if (!returnmany) {
                yield* rowondblclick(event, row)
                return exoduscancelevent(event)
            }
            yield* clickrow(row)
        }

        function* rowondblclick(event, row) {
            event=getevent(event)

            //double click on already selected row causes the row to be deselected
            //which is not the desired effect so reselect it
            if (!row)
                row = getancestor(event.target, 'TR')
            var col0 = getcol0(row)//row.all['col0']
            if (col0.innerText == ' ' || col0.innerText == '' || col0.innerText == '\u00a0')
                yield* clickrow(row)

            ok_onclick()

        }

        function getcol0(row) {
            var element
            var elements = row.getElementsByTagName('*')
            for (var ii = 0; ii < elements.length; ii++) {
                element = elements[ii]
                if (element.id == 'col0')
                    return element
            }

            return

        }

        function* clickrow(row) {
            if (!row) return
            var rown = row.recordNumber - 1
            // var col0=row.all['col0']
            var col0 = getcol0(row)
            var checking = (col0.innerText == ' ' || col0.innerText == '' || col0.innerText == '\u00a0')
            if (typeof gtable1.nchecked == 'undefined')
                gtable1.nchecked = 0

            //checking
            if (checking) {

                //uncheck previous row if not selecting many
                if (!returnmany) {
                    if (selectedrow) {
                        gtable1.nchecked--
                        //selectedrow.all('col0').innerHTML='&nbsp;'
                        getcol0(selectedrow).innerHTML = '&nbsp;'
                        selectedrow.style.backgroundColor = ''
                    }
                    selectedrow = row
                }

                //increase the total number of selections
                gtable1.nchecked++

                //show the current selection number
                col0.innerText = gtable1.nchecked

                //force the row to remain highlighted after mouse leaves  
                row.setAttribute('oldoldcolor', row.getAttribute('oldcolor'))
                row.setAttribute('oldcolor', 'yellow')

            }

            //unchecking
            else {

                selectedrow = null

                //decrease the total number of selections
                gtable1.nchecked--

                var checkno = parseInt(col0.innerText, 10)
                col0.innerHTML = '&nbsp;'

                //renumber greater numbered selection by minus one
                var col0s = document.getElementsByName('col0')
                if (checkno <= gtable1.nchecked) {
/*                    for (var ii = 0; ii < col0s.length; ii++) {
                        if (col0s[ii].innerText > checkno)
                            col0s[ii].innerText = col0s[ii].innerText - 1
                    }
*/
                    var rows = gtable1.rows
                    var n = rows.length
                    var nheaderrows = 1
                    for (var ii = nheaderrows; ii < n; ii++) {
                        //var checkno=gtable1.rows[ii].all.col0.innerText
                        var col0=getcol0(rows[ii])
                        if (col0.innerText > checkno)
                            col0.innerText = col0.innerText - 1
                    }
                }

                //unhighlight the row (when the mouse leaves)   
                row.setAttribute('oldcolor', row.getAttribute('oldoldcolor'))

            }

        }

        function dbgetnodesvalue(nodes) {
            var text = ''
            var nn = nodes.length
            for (var ii = 0; ii < nn; ii++)
                text = text + nodes[ii].nodeValue
            return text
        }

        function ok_onclick() {

            //offset one column for selection column
            var returncoln2=returncoln
            if (returncolid !== '' && returncoln !== '')
                returncoln2++

            var returnvalues = []
            var rows = gtable1.rows
            var n = rows.length
            var nheaderrows = 1
            for (var ii = nheaderrows; ii < n; ii++) {
                //var checkno=gtable1.rows[ii].all.col0.innerText
                var col0=getcol0(rows[ii])
                var checkno = col0.innerText
                //if (checkno != " ") {
                if (checkno != ' ' && checkno != '' && checkno != '\u00a0') {//&nbsp;
                    var temp
                    if (returncolid === '') {
                        //    temp=dataobj.group1[ii]
                        //if (selectionns.length)
                        //    temp = (+selectionns[ii]) + 1
                        //else
                        //    temp = ii + 1
                        temp=Number(col0.getAttribute('exoduspopuprown'))+1
                    }
                    else {
                        if (returncoln2 === '') {

                            //extract from xml object
                            if (xmldatabinding)
                            //temp=xml1.firstChild.childNodes[ii].getElementsByTagName(returncolid)[0].text
                                temp = dbgetnodesvalue(xml1.firstChild.childNodes[ii - nheaderrows].getElementsByTagName(returncolid)[0].childNodes)

                            //extract from data object
                            else
                                temp = grecords[ii - nheaderrows][returncolid].text
                        }
                        else
                        //extract from columns
                        
                            temp = gtable1.rows[ii].getElementsByTagName('TD')[returncoln2].innerText
                    }
                    returnvalues[checkno - 1] = temp
                }
            }

            if (returncoln2 !== '') {
                if (!returnvalues[0])
                    returnvalues = ''
            }

            if (typeof returnvalues == 'object' && !returnvalues.length)
                returnvalues = ''

            closeit(returnvalues)

        }

        function closeit(returnvalues) {
            //exodus_setparentwin_returnvalue(returnvalues)
            //return window.close()
            return exoduswindowclose(returnvalues)
        }

        function cancel_onclick() {

            //restore hidden lines first
            if (ghidden) {
                searchrows()
                return
            }

            closeit('')
        }

        function* decide2_init() {
            //called early to make visible
            yield* clientfunctions_setstyle()

            //xmldatabinding=(navigator.appVersion.indexOf('Macintosh')<0&&(typeof data=='string'))
            //xmldatabinding=(navigator.appVersion.indexOf('Macintosh')<0&&(typeof data=='string')&&data.indexOf('</')>=0)
            //xmldatabinding=false&&typeof data=='string'&&data.indexOf('</')>=0

            var table1 = gtable1
            //if (table1&&typeof table1.onreadystatechange!='undefined')
            // table1.onreadystatechange=table1_readystatechange
            //addeventlistener(table1,'readystatechange',table1_readystatechange)
            addeventlistener(table1, 'readystatechange', 'table1_readystatechange')

            if (typeof window.dialogArguments == 'undefined')
                window.dialogArguments = []

            //returncolid==='' or undefined means return row number(s)


            //question
            if (!question)
                question = 'Which do you want?'
            //question = question.replace(/[\|\r\n]/g, '<br />')
            question = question.replace(/\r\n/g, '\r')
            question = question.replace(/\r\r/g, '<p />')
            question = question.replace(/\r/g, '<br />')
            question = question.replace(/\n/g, '<br />')
            question = question.replace(FMre, '<br />')
            question = question.replace(VMre, '<br />')
            question = question.replace(SMre, '<br />')
            question = question.replace(TMre, '<br />')
            question = question.replace(/\|/g, '<br />')
            $$('question1').innerHTML = question

            //indicate xmldatabinding is to be attempted if passed an xml string
            //still may be parsed and bound manually if xmlload function isnt supported/doesnt work
            xmldatabinding = typeof data == 'string' && data.slice(0, 8) == '<records'

            if (!xmldatabinding) {

                //data
                //[[,,,],[,,,],[,,,]] or
                //col1.1 vm col1.2 fm col2.1 vm col2.2 etc
                if (!data)
                    data = [['Yes'], ['No']]

                //convert conversion string to an array
                if (typeof data == 'string') {

                    //make sure we get at least one conversion
                    if (data == '')
                        data = ';'

                    //convert into an array
                    var sepchars = (data.indexOf(vm) >= 0 || data.indexOf(fm) >= 0) ? fm + vm : ':;'
                    data = data.exodussplit(sepchars)

                }

                //make sure some columns
                else {
                    if (typeof (data[0]) != 'object') {
                        for (var ii = 0; ii < data.length; ii++) data[ii] = data[ii].split(';')
                    }
                }

                //if (typeof data=='string') data=data.split(fm)
                // for (ii=0;ii<data.length;ii++)
                // {
                //  if (typeof data[ii]=='string') data[ii]=data[ii].split(vm)
                // }

            }

            //columns
            //[[dictid,title],etc. or
            //colid vm coltitle fm ... etc one per column
            if (!cols) {
                var n = 1
                if (typeof data[0] == 'object') n = data[0].length
                cols = []
                for (var ii = 0; ii < n; ii++) cols[ii] = [ii, '']
            }
            if (typeof cols == 'string') {
                if (cols.indexOf(fm) < 0 && cols.indexOf(vm) < 0) {
                    cols = cols.replace(/:/g, fm)
                    cols = cols.replace(/;/g, vm)
                }
                cols = cols.split(fm)
            }

            for (ii = 0; ii < cols.length; ii++) {
                if (typeof cols[ii] == 'string')
                    cols[ii] = cols[ii].split(vm)

                //create col title from col code if not numeric
                if ((typeof cols[ii][1] == 'undefined') && !parseInt(cols[ii][0]))
                    cols[ii][1] = cols[ii][0].exoduscapitalise()

                //detect return column number
                if (ii == returncolid || cols[ii][0] == returncolid)
                    returncoln = ii

            }
            var ncols = cols.length
            
            //system error if return column is not in the list of columns
            if (returncolid !== '' && returncoln === '') {
                //ok if in xml data
                if (data.indexOf('<' + returncolid + '>') >= 0) {
                }
                else {
                    alert('System Error in decide2.htm\n' + returncolid + ' is not in the columns')
                    closeit('')
                }
            }

            //returncolid
            if (typeof returncolid == 'undefined')
                returncolid = ''

            //return last column if returncoln>ncols
            // if (returncoln>cols.length-1) returncoln=cols.length

            //var returncoln2=returncoln+1

            //defaultreply
            //zzz needs programming

            //returnmany
            //returnmany=

            //1st header column is for check box
            var oCell = document.createElement('th')
            oCell.innerHTML = "&nbsp;"
            var table1head1row1 = $$('table1head1row1')
            table1head1row1.insertBefore(oCell, null)

            //1st row column is for check box
            var emptyrow = document.createElement('tr')
            var oCell = document.createElement('td')
            oCell.id = 'col0'
            //td cannot have name attribute
            //oCell.name='col0'
            if (returnmany)
                oCell.innerHTML = "&nbsp;"//<input id=selection name=selection type=checkbox />"
            else
                oCell.innerHTML = "&nbsp;"//<input id=selection name=selection type=radio />"
            emptyrow.insertBefore(oCell, null)

            //setup the columns
            for (ii = 0; ii < cols.length; ii++) {

                //header column
                var oCell = document.createElement('th')
                oCell.style.fontWeight = 'bold'
                //oCell.innerText=cols[ii][1]
                var title = cols[ii][1]
                if (typeof title == 'undefined') {
                    title = cols[ii][0]
                    if (parseInt(title)) title = ''
                    title = title.replace(/_/gi, ' ')
                }
                oCell.innerHTML = title
                table1head1row1.insertBefore(oCell, null)

                //row column
                var oCell = document.createElement('td')
                oCell.id = "col" + (ii + 1)
                //preset cell innertext with a space to fix a mac ie5 bug that eats one character
                //if (!xmldatabinding)
                // oCell.innerText=' '
                emptyrow.insertBefore(oCell, null)

                //alignment
                if (cols[ii][3])
                    oCell.align = cols[ii][3]

                if (xmldatabinding) {
                    var oSpan = document.createElement('span')
                    oCell.insertBefore(oSpan, null)
                    oSpan.setAttribute('datafld', cols[ii][0])
                    oSpan.setAttribute('id', cols[ii][0])

                    //use text otherwise do not copied to dynamically created rows
                    //zzz use document onclick to capture all?
                    addeventlistener(emptyrow,'click','rowonclick')
                    addeventlistener(emptyrow,'mouseover','rowonmouseover')
                    addeventlistener(emptyrow,'dblclick','rowondblclick')

                }

            }

            var table1body1 = $$('table1body1')

            //setup the rows
            if (xmldatabinding) {

                //insert one row
                table1body1.insertBefore(emptyrow, null)

                //load the xml text
                var xml1 = $$('xml1')
                if (true || typeof xml1.loadXML == 'undefined')
                    xmldatabinding = false
                else {
                    if (!xml1.loadXML(data)) {
                        alert('XML data could not be loaded in decide2. Continuing without XML\n\n' + data.slice(0, 100))
                        //   return
                        xmldatabinding = false
                    }
                }

            }

            if (!xmldatabinding) {

                //convert dataxml to dataobj if necessary
                var dataobj = data
                if (typeof dataobj == 'string')
                    dataobj = exodusxml2obj(dataobj)

                //look for group1 otherwise use main dataobj
                grecords = dataobj.group1
                if (typeof grecords == 'undefined')
                    grecords = dataobj

                var starttime = new Date
                var maxsecs = 15
                
                //for each row
                for (var rown = 0; rown < grecords.length; rown++) {

                    //break if too many rows
                    if ((new Date() - starttime) > (maxsecs * 1000)) {
                        if (!(confirm('A large popup window is taking time to prepare.\r\rClick [OK] to wait or [Cancel] to see part.'))) break
                        starttime = new Date
                    }

                    //not using emptyrow.cloneNode method now because
                    //msie clones eventlisteners but other browsers dont
                    //add a new form row
                    //if (emptyrow.cloneNode)
                    //    var newrow = emptyrow.cloneNode(true)
                    //else
                    //    var newrow = document.createElement('tr')

                    //1st row column is for check box
                    var newrow = document.createElement('tr')
                    var oCell = document.createElement('td')
                    oCell.id = 'col0'
                    //td cannot have name attribute
                    //oCell.name='col0'
                    if (returnmany)
                        oCell.innerHTML = "&nbsp;"//<input id=selection name=selection type=checkbox />"
                    else
                        oCell.innerHTML = "&nbsp;"//<input id=selection name=selection type=radio />"
                    newrow.insertBefore(oCell, null)

                    table1body1.insertBefore(newrow, null)

                    addeventlistener(newrow,'click','rowonclick')
                    addeventlistener(newrow,'mouseover','rowonmouseover')
                    addeventlistener(newrow,'dblclick','rowondblclick')
                
                    //for (var coln=0;coln<cols.length;coln++)
                    for (var coln = 0; coln<cols.length;++coln) {

                        //row column
                        var oCell = document.createElement('td')
                        oCell.id = "col" + (ii + 1)
                        //preset cell innertext with a space to fix a mac ie5 bug that eats one character
                        //if (!xmldatabinding)
                        // oCell.innerText=' '
                        newrow.insertBefore(oCell, null)

                        //alignment
                        if (!cols[coln][3] && cols[coln][2] && cols[coln][2] == 'DATE')
                            cols[coln][3] = 'right'
                        if (cols[coln][3])
                            oCell.align = cols[coln][3]

                    }
                    
                    //put data into table row (in reverse order for some reason)
                    var anyrowdata = false
                    //for (var coln=0;coln<cols.length;coln++)
                    for (var coln = cols.length - 1; coln >= 0; coln--) {

                        var newnode
                        newnode = newrow.childNodes[coln + 1]

                        var datacell = grecords[rown][cols[coln][0]]
                        var value = (typeof datacell.text == 'undefined') ? datacell : datacell.text

                        if (value)
                            anyrowdata = true

                        //date conversion
                        if (cols[coln][2] == 'DATE' && exodusnum(value))
                            value = DATE(value)

                        //newrow.childNodes[coln+1].innerHTML=value
                        //use innerText otherwise things like <> in the data do not show
                        newnode.innerHTML = value.exodusconvert(vm+sm+tm,'   ')

                        //alignment
                        if (cols[coln][3])
                            newnode.align = cols[coln][3]

                    }

                    //finalise, or delete the row if no data inserted
                    if (anyrowdata) {
                        newrow.childNodes[0].innerText = ' '
                        var col0=getcol0(newrow)
                        col0.setAttribute('exoduspopuprown',rown)
                        //selectionns[selectionns.length] = rown - 1
                    }
                    else
                        newrow.parentNode.removeChild(newrow)

                }

                if (emptyrow&&emptyrow.parentNode)
                    emptyrow.parentNode.removeChild(emptyrow, true)
                
                yield* table1_readystatechange()

            }

        }
        
        function highlightrow1(event) {

            //highlight the first row
            if (gtable1.tBodies.length && gtable1.tBodies[0].rows.length)
                highlightrow(event)
            else
                exodussettimeout('highlightrow1()', 100)

            return

        }

        var highlighter = ''

        function* table1_readystatechange(event) {

            event=getevent(event)

            //highlight row 1 asap
            if (highlighter == '')
                highlighter = exodussettimeout('highlightrow1()', 100)

            var table1 = gtable1

            //quit if not ready
            if (typeof table1.readyState != 'undefined' && table1.readyState != 'complete')
                return

            var rows = table1.tBodies[0].rows

            //check if no options
            if (!rows.length) {
                alert('No options available')
                return closeit('')
            }

            //return if only one option
            //!!! why does binding produce multiple tbodies???
            if (rows.length == 1 && table1.tBodies.length == 1) {
                yield* clickrow(rows[0])
                ok_onclick()
                //yield* rowondblclick(event, rows[0])
                return
            }

            //maximise visibility
            //exodusautofitwindow()
            
        }

        //pls keep this routine synchronised in decide2.htm and scripts/client.htm
        function exodusxml2obj(xmltext) {

            var dataobj = new Object
            dataobj.group1 = []
            var recn = -1
            var currentrow
            xml = xmltext.split('<')
            for (var fragn = 1; fragn < xml.length; fragn++) {
                var frag = xml[fragn].split('>')
                if (frag[0].toLowerCase() != 'records' && frag[0].toLowerCase() != '/records') {
                    if (frag[0].toLowerCase() == 'record')
                        dataobj.group1[++recn] = currentrow = new Object
                    else {
                        if (frag[0].slice(0, 1) != '/') {
                            //currentrow[frag[0]]=(new Object).text=frag[1]
                            var cell = new Object
                            cell.text = frag[1]
                            currentrow[frag[0]] = cell
                        }
                    }
                }
            }

            return dataobj

        }

        function getancestor(startelement, ancestorTag) {

            if (startelement == null)
                return null

            var ancestor = startelement.parentNode
            ancestorTag=ancestorTag.toUpperCase()
            while (ancestor != null && ancestor.tagName != ancestorTag)
                ancestor = ancestor.parentNode

            return (ancestor)
        }

    </script>

</head>
<body>
    <!-- need both align center to center everything because text-align:center; doesnt work
    and auto margins to avoid taking full screen width -->
    <div id="autofitwindowelement" align="center" style="margin-left: auto; margin-right: auto;
        float: left">
        <h2 style="text-align: center" id="question1">
            Which do you want?</h2>
        <p style="text-align: center">
            <input id="ok_button" onclick="ok_onclick()" value="OK" type="submit" class="exodusbutton"
                title="Enter, Ctrl+Enter or F9" />
            <input id="cancel_button" onclick="cancel_onclick()" value="Cancel" type="button"
                class="exodusbutton" title="Esc" />
            <input id="print_button" onclick="window.print()" value="Print" type="button" title="Alt+P"
                accesskey="P" class="exodusbutton" />
            <input id="find_button" onclick="find_onclick(event)" value="Find" type="button"
                title="Alt+F" accesskey="F" class="exodusbutton" />
            <input id="many_button" onclick="many_onclick(event)" value="Many" type="button"
                title="Alt+M" accesskey="F" class="exodusbutton" style="display:none"/>
        </p>
        <table id="table1" datasrc="#xml1" class="exodusform" border="1" bordercolor="#d0d0d0"
            cellspacing="0" xcellpadding="0">
            <thead onclick="sorttable2(event)" style="cursor: pointer">
                <tr id="table1head1row1">
                </tr>
            </thead>
            <tbody id="table1body1" style="cursor: pointer">
            </tbody>
        </table>
    </div>
    <xml id="xml1"></xml>
</body>
</html>
