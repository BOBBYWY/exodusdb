#!/bin/bash
set -eu

: ====================================================
: doone database/site/service - may be called by doall
: ====================================================

:
: Provided by caller
: ==================
:
:	FILTER_DB - skip if doesnt match command line
:	CMD - eg restart backup_db etc. REQUIRED.
:	OPTIONS - used on some commands
:	OPTIONS2 - ditto
:	COMMAND_LINE - used for bash commands
:   ADMIN_EMAIL - optional defaults to backups@neosys.com
:   TEST - optional eg restart only the test service
:   LIVE - optional eg restart only the live  service
:	APP_CODE - e.g. 'agy' Defaults to 'exo'. Used for prefix on services

:
: Config
: ======
:
	export OLD_BACKUP_DIR=/backups/current/win3
	export NEW_BACKUP_DIR=~/backups/sql
	export LOGDIR=/var/log/exodus

:
: Optionally limit to LIVE or TEST databases
: ==========================================
:
    if [ "${1:-}" = "LIVE" ]; then
        export LIVE=live
        shift
    fi
:
    if [ "${1:-}" = "TEST" ]; then
        export TEST=test
        shift
    fi

:
: Command line Parameters
: =======================
:
	export DB_CODE=${1}					#orangeksa
	export SITE_DIR=${2:-$DB_CODE}		#orange
	export HOST_NAME=${3:-$DB_CODE}		#'' = orangeksa
	export OLD_SITE=${4:-$SITE_DIR}		#funoon
	export OLD_DB=${5:-${OLD_SITE^^}}	#ORANGEKSA

	export LIVE_PREFIX=live
	export TEST_PREFIX=test

	export APP_CODE=${APP_CODE:-exo}
	export SITE_SERVICE_CODE=${LIVE_PREFIX}_$DB_CODE #apache
	export LIVE_SERVICE_CODE=${APP_CODE}_${LIVE_PREFIX}@$DB_CODE #systemd
	export TEST_SERVICE_CODE=${APP_CODE}_${TEST_PREFIX}@$DB_CODE #systemd

	export WORK_DIR=$SITE_DIR
	export EXO_DBNAME=$DB_CODE

	export DUPLICATE_SITE_DIR=${2:-}		#dont create_site if specified

	export ADMIN_EMAIL=${ADMIN_EMAIL:-backups@neosys.com}
	export FILTER_DB=${FILTER_DB:-}
	export LIVE=${LIVE:-}
	export TEST=${TEST:-}

:
:
: Option to process only one database
: ===================================
:
	if [ "$FILTER_DB" != "" -a "$DB_CODE" != "$FILTER_DB" ]; then
		exit
	fi
:
:
: Import a AREV database
: ======================
:
	if [ "$CMD" = "import_db" ]; then
:
		./import_db $DB_CODE $OLD_SITE $OLD_DB $OPTIONS $OPTIONS2|| exit
:
:
: Backup a database
: =================
:
	elif [ "$CMD" = "backup_db" ]; then
:
		mkdir -p $LOGDIR
		LOGFILE=$LOGDIR/backup.$DB_CODE.log
:
		#( printf "subject:exodus $DB_CODE\nfrom:$HOSTNAME@neosys.com\n" && ./backup_db $DB_CODE $NEW_BACKUP_DIR < /dev/null || printf "Backup Failed.\n") |& tee $LOGFILE | sendmail -t backups@neosys.com &
:
		{
			if ./backup_db $DB_CODE $NEW_BACKUP_DIR < /dev/null |& tee $LOGFILE; then
				RESULT=
			else
				RESULT=FAILURE
			fi
			cat $LOGFILE | neomail $ADMIN_EMAIL '' "From: $HOSTNAME@neosys.com
Subject: EXODUS Backup: $DB_CODE -> $NEW_BACKUP_DIR $RESULT"
		} &

:
:
: Restore a database
: ==================
:
	elif [ "$CMD" = "restore_db" ]; then
:
		./restore_db $DB_CODE $NEW_BACKUP_DIR "$OPTIONS" "$OPTIONS2"
:
:
: Create a test database
: ======================
:
	elif [ "$CMD" = "create_testdb" ]; then
:
		./create_testdb $DB_CODE
:
:
: Import files from win3 - images, system.cfg, backup.cfg, smtp,cfg
: =================================================================
:
	elif [ "$CMD" = "import_files" ]; then
:
		./import_files $DB_CODE $SITE_DIR $OLD_SITE $OLD_DB $OPTIONS
:
:
: Create a web site
: =================
:
	elif [ "$CMD" = "create_site" ]; then
:
#		if [ -z $DUPLICATE_SITE_DIR ]; then
#		if [ $DB_CODE = $SITE_DIR ] ;then
			./create_site $HOST_NAME $SITE_DIR $DB_CODE $OPTIONS
#		fi
:
:
: Delete a web site
: =================
:
	elif [ "$CMD" = "delete_site" ]; then
:
		./delete_site $HOST_NAME $SITE_DIR || true
:
:
: Enable a web site
: =================
:
	elif [ "$CMD" = "a2ensite" ]; then
:
		if [ $DB_CODE = $SITE_DIR ] ;then
			sudo a2ensite $SITE_SERVICE_CODE
		fi
:
:
: Disable a web site
: ==================
:
	elif [ "$CMD" = "a2dissite" ]; then
:
		if [ $DB_CODE = $SITE_DIR ] ;then
			sudo a2dissite $SITE_SERVICE_CODE || true
		fi
:
:
: Create a system service
: =======================
:
	elif [ "$CMD" = "create_service" ]; then
:
		[ -z $TEST ] && ./create_service $LIVE_PREFIX $WORK_DIR $DB_CODE
		[ -z $LIVE ] && ./create_service $TEST_PREFIX $WORK_DIR ${DB_CODE}_test
:
:
: Delete a system service
: =======================
:
	elif [ "$CMD" = "delete_service" ]; then
:
		[ -z $TEST ] && ./delete_service $LIVE_PREFIX $WORK_DIR $DB_CODE || true
		[ -z $LIVE ] && ./delete_service $TEST_PREFIX $WORK_DIR ${DB_CODE}_test || true
:
:
: Manage a service - stop, stop, restart, reload, status
: ======================================================
:
	elif [ "$CMD" = "start" -o "$CMD" = "restart" -o "$CMD" = "stop" -o "$CMD" = "reload" -o "$CMD" = "status" ]; then
:
		if [ -z $TEST ]; then
			echo "sudo systemctl $CMD $LIVE_SERVICE_CODE"
			sudo systemctl $CMD $LIVE_SERVICE_CODE &
		fi
:
		if [ "$TEST_SERVICE_CODE" -a "$LIVE" = "" ]; then
			echo "sudo systemctl $CMD $TEST_SERVICE_CODE"
			sudo systemctl $CMD $TEST_SERVICE_CODE &
		fi
:
:
: list active system services
: ===========================
:
	elif [ "$CMD" = "active" ]; then
:
		if [ -z "$TEST" ]; then
			echo  $LIVE_SERVICE_CODE `sudo service $LIVE_SERVICE_CODE status | grep -w active` | grep -w active || true
		fi
		if [ -z "$LIVE" ]; then
			echo  $TEST_SERVICE_CODE `sudo service $TEST_SERVICE_CODE status | grep -w active` | grep -w active || true
		fi
:
:
: list inactive system services
: =============================
:
	elif [ "$CMD" = "inactive" ]; then
:
		if [ -z "$TEST" ]; then
			echo  $LIVE_SERVICE_CODE `sudo service $LIVE_SERVICE_CODE status | grep -w inactive` | grep -w inactive || true
		fi
		if [ -z "$LIVE" ]; then
			echo  $TEST_SERVICE_CODE `sudo service $TEST_SERVICE_CODE status | grep -w inactive` | grep -w inactive || true
		fi
:
:
: Any bash command.  EXO_DBNAME will be set to $EXO_DBNAME
: ========================================================
:
	elif [ "$CMD" = "bash" ]; then
:
		if [ -z $TEST ]; then
			export EXO_DBNAME=${DB_CODE}
			echo $COMMAND_LINE
			eval $COMMAND_LINE
		fi
		if [ -z $LIVE ]; then
			export EXO_DBNAME=${DB_CODE}_test
			echo $COMMAND_LINE
			eval $COMMAND_LINE
		fi
:
:
: Invalid syntax
: ==============
:
	else
:
: 'Syntax is ./doall [LIVE|TEST] xxxxxx [OPTION ...]'
:
: 'Where xxxxxx is one of the above command words'
: 'and OPTION(S) depend on the command'
:
	fi
