#!/bin/bash
set -eux

: ==========================
: Backup a postgres database
: ==========================
:
: ' Syntax:'
:
: '  ./backup_db <DBNAME> [<OPTIONS>...] [<BACKUPDIR>] [<RESTOREDB_SUFFIX>]'
:
: '<OPTIONS> are (B)ackup, (R)estore, (V)erify, (S)tart'
: '          Defaults to BRVS'
:
: '<BACKUPDIR> defaults to ~/backups/sql'
:
: 'RESTOREDB_SUFFIX defaults to test i.e. _test'
:
: 'Example:'
:
: '  ./backup_db mgg'
: '  ./backup_db mgg BRVS'
:
: 'Restores backup to same databasename but ending _test by default'
:
	EXO_DATA=${1:?<DBNAME> argument is required.}
	OPTIONS=${2:-BRVS}
	NEW_BACKUP_DIR=${3:-~/backups/sql}
	RESTOREDB_SUFFIX=${4:-test}
:
: Ensure target directory exists
: ==============================
:
	mkdir -p $NEW_BACKUP_DIR

:
: Dump the database SQL and zip it
: ================================
:
	if [[ $OPTIONS =~ "B" ]]; then
		set -o pipefail
		#NCPUS=`grep -c processor /proc/cpuinfo`
		sudo -u postgres pg_dump $EXO_DATA | gzip > $NEW_BACKUP_DIR/$EXO_DATA.sql.gz.part
		mv $NEW_BACKUP_DIR/$EXO_DATA.sql.gz.part $NEW_BACKUP_DIR/$EXO_DATA.sql.gz
	fi

:
: Optionally restore into ${EXO_DATA}_$RESTOREDB_SUFFIX - without restarting it afterwards
: =============================================================================
:
	if [[ $OPTIONS =~ "R" ]]; then
		./restore_db $EXO_DATA "$NEW_BACKUP_DIR" "N"
	fi

:
: Optionally Compare and flag success if ok
: =========================================
:
	if [[  $OPTIONS =~ "V" ]]; then
		if dbcomp $EXO_DATA ${EXO_DATA}_$RESTOREDB_SUFFIX {S}; then
			touch "$HOME/hosts/$EXO_DATA/data/$EXO_DATA/params2"
		fi
	fi

:
: Optionally restart the target TEST database ${EXO_DATA}_$RESTOREDB_SUFFIX
: =========================================================================
:
	if [[ $OPTIONS =~ "S" ]]; then
		./service ${EXO_DATA} start $RESTOREDB_SUFFIX
	fi

:
: Finished backup_db $1 in $(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds.
: ======================================================
