#!/bin/bash
set -euxo pipefail

: ==========================
: Backup a postgres database
: ==========================
:
: ' Syntax:'
:
: '  ./backup_db DBNAME [OPTIONS...] [BACKUPDIR] [RESTOREDB_SUFFIX]'
:
: 'OPTIONS are (B)ackup, (R)estore, (V)erify, (D)elete'
: '          Defaults to BRV'
:
: 'BACKUPDIR defaults to ~/hosts/$LIVE_EXO_DATA/work'
:
: 'RESTOREDB_SUFFIX defaults to test i.e. _test'
:
: 'Example:'
:
: '  ./backup_db mgg'
: '  ./backup_db mgg BR #backup and restore to mgg_test without check or restart of mgg_test'
:
: 'Restores backup to same databasename but ending _test by default'
:
	LIVE_EXO_DATA=${1:?DBNAME argument is required.}

	OPTIONS=${2:-BRV}

	#NEW_BACKUP_DIR=${3:-~/backups/sql}
	NEW_BACKUP_DIR=${3:-~/hosts/$LIVE_EXO_DATA/work}

	RESTOREDB_SUFFIX=${4:-test}

	SITE_DIR=${SITE_DIR:-$LIVE_EXO_DATA}

:
: Init
: ====
:
	TEST_EXO_DATA=${LIVE_EXO_DATA}_$RESTOREDB_SUFFIX

:
: Create target directory if it doesnt exist
: ==========================================
:
	mkdir -p $NEW_BACKUP_DIR

:
: Dump the database SQL and zip it
: ================================
:
	if [[ $OPTIONS =~ "B" ]]; then
		#NCPUS=`grep -c processor /proc/cpuinfo`
		sudo -u postgres pg_dump $LIVE_EXO_DATA | gzip > $NEW_BACKUP_DIR/$LIVE_EXO_DATA.sql.gz.part
		mv $NEW_BACKUP_DIR/$LIVE_EXO_DATA.sql.gz.part $NEW_BACKUP_DIR/$LIVE_EXO_DATA.sql.gz
	fi

:
: Optionally stop the test database if we are going to compare after restore
: ==========================================================================
:
	if [[  $OPTIONS =~ "V" ]]; then

		:
		: Detect if test database is running
		: ==================================
		:
			./service ${LIVE_EXO_DATA} is-active test &> /dev/null && RESTART_REQUIRED=Y || RESTART_REQUIRED=N

		:
		: Stop the test database if it is running
		: =======================================
		:
			[ $RESTART_REQUIRED = Y ] && ./service ${LIVE_EXO_DATA} stop test

	fi

:
: Optionally restore into test database
: =====================================
:
	if [[ $OPTIONS =~ "R" ]]; then
		./restore_db $LIVE_EXO_DATA "$NEW_BACKUP_DIR"
	fi

:
: Optionally compare the restored test database with the backed up live db
: ========================================================================
:
	DBCOMP_FAILED=
	if [[  $OPTIONS =~ "V" ]]; then

		if dbcomp $LIVE_EXO_DATA $TEST_EXO_DATA {S}; then
			:
			: Flag success - no differences except in status/log files
			: ========================================================
			:
				touch ~/hosts/$SITE_DIR/data/$LIVE_EXO_DATA/params2

                if [ -d ~/hosts/$SITE_DIR/data/$TEST_EXO_DATA ];then

                    : to avoid "Last backup was " warning on login on test databases
                    :
                    cp -a ~/hosts/$SITE_DIR/data/$LIVE_EXO_DATA/params2 \
                          ~/hosts/$SITE_DIR/data/$TEST_EXO_DATA/params2
                fi
        else
            :
            : DBCOMP FAILED - differences found
            : =================================
            :
				# Dont exit 1 yet, in case dbdelete or service restart is required
				DBCOMP_FAILED=1
		fi
	fi

:
: Optionally delete the restored test database
: ============================================
:
	if [[ $OPTIONS =~ "D" ]]; then
		dbdelete $TEST_EXO_DATA
	fi

:
: Restart the test service if it was running and shutdown in order to perform compare
: Compare cannot be done after starting the service since it will update the database
: ===================================================================================
:
	if [ ${RESTART_REQUIRED:-N} = Y ]; then
		./service ${LIVE_EXO_DATA} start test
	fi

:
: Check for dbcomp failure
: ========================
:
	if [ "$DBCOMP_FAILED" ]; then
		:
		: Finished backup_db $1 in $(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds.
		: ======================================================
		# Caught exit code by doone
		exit 1
	fi

:
: Finished backup_db $1 in $(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds.
: ======================================================
