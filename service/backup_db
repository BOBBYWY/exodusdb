#!/bin/bash
set -eux

: ==========================
: Backup a postgres database
: ==========================
:
:	'Syntax is:'
:
:	' ./backup_db <EXO_DBNAME> [<OPTIONS>...] [<BACKUPDIR>]'
:
:	'<OPTIONS> are (B)ackup, (R)estore, (V)erify, (S)tart'
:	'          defaults to BRVS'
:
:	'<BACKUPDIR> defaults to ~/backups/sql'
:
:	'e.g.'
:
:	' ./backup_db mgg'
:	' ./backup_db mgg BRVS'
:
:	'Only restores backup to test database'
:
	EXO_DBNAME=$1
	OPTIONS=${2:-BRVS}
	NEW_BACKUP_DIR=${3:-~/backups/sql}

:
: Ensure target directory exists
: ==============================
:
	mkdir -p $NEW_BACKUP_DIR

:
: Dump the database SQL and zip it
: ================================
:
	if [[ $OPTIONS =~ "B" ]]; then
		set -o pipefail
		#NCPUS=`grep -c processor /proc/cpuinfo`
		sudo -u postgres pg_dump $EXO_DBNAME | gzip > $NEW_BACKUP_DIR/$EXO_DBNAME.sql.gz.part
		mv $NEW_BACKUP_DIR/$EXO_DBNAME.sql.gz.part $NEW_BACKUP_DIR/$EXO_DBNAME.sql.gz
	fi

:
: Optionally restore into ${EXO_DBNAME}_test - without restarting it afterwards
: =============================================================================
:
	if [[ $OPTIONS =~ "R" ]]; then
		./restore_db $EXO_DBNAME "$NEW_BACKUP_DIR" "N"
	fi

:
: Optionally Compare and flag success if ok
: =========================================
:
	if [[  $OPTIONS =~ "V" ]]; then
		if dbcomp $EXO_DBNAME ${EXO_DBNAME}_test {S}; then
			touch "$HOME/hosts/$EXO_DBNAME/data/$EXO_DBNAME/params2"
		fi
	fi

:
: Optionally restart the target TEST database ${EXO_DBNAME}_test
: ==============================================================
:
	if [[ $OPTIONS =~ "S" ]]; then
		./service ${EXO_DBNAME} start test
	fi

:
: Finished backup_db $1 in $(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds.
: ======================================================
