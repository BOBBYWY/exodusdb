// generated by exodus "compile ioconv_custom"
//#ifndef EXODUSDLFUNC_IOCONV_CUSTOM_H
#define EXODUSDLFUNC_IOCONV_CUSTOM_H

// a member variable/object to cache a pointer/object for the shared library function
// Callable Callable_ioconv_custom;
class Callable_ioconv_custom : public Callable {
   public:
	Callable_ioconv_custom(ExoEnv& mv)
		: Callable("ioconv_custom", "exodusprogrambasecreatedelete_", mv) {
	}

	// Allow assignment of library name to override the default constructed
	using Callable::operator=;

	// a member function with the right arguments, returning a var or void
	var operator()(in type, in input, in mode, out output) {

		// first time link to the shared lib and create/cache an object from it
		// passing current standard variables in mv
		// first time link to the shared lib and create/cache an object from it
		// passing current standard variables in mv
		// if (Callable_getlang.pmemberfunction_==nullptr)
		// Callable_getlang.init("getlang","exodusprogrambasecreatedelete_",mv);
		if (this->pmemberfunction_ == nullptr)
			this->init();

		// define a function type (pExodusProgramBaseMemberFunction)
		// that can call the shared library object member function
		// with the right arguments and returning a var or void
		using pExodusProgramBaseMemberFunction = var (ExodusProgramBase::*)(in, in, in, out);

		// call the shared library object main function with the right args,
		// returning a var or void
		// return CALLMEMBERFUNCTION(*(Callable_ioconv_custom.pobject_),
		//((pExodusProgramBaseMemberFunction) (Callable_ioconv_custom.pmemberfunction_)))
		// (mode);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
		return CALLMEMBERFUNCTION(*(this->pobject_),
								  ((pExodusProgramBaseMemberFunction)(
									  this->pmemberfunction_)))(type, input, mode, output);
#pragma GCC diagnostic pop
	}

	var operator()() {
		var type_in;
		var input_in;
		var mode_in;
		var output_out;
		return operator()(type_in, input_in, mode_in, output_out);
	}

	var operator()(in type) {
		var input_in;
		var mode_in;
		var output_out;
		return operator()(type, input_in, mode_in, output_out);
	}

	var operator()(in type, in input) {
		var mode_in;
		var output_out;
		return operator()(type, input, mode_in, output_out);
	}

	var operator()(in type, in input, in mode) {
		var output_out;
		return operator()(type, input, mode, output_out);
	}
};
Callable_ioconv_custom ioconv_custom{mv};
//#endif
