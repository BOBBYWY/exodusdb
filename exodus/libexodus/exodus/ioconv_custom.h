//generated by exodus "compile /root/exodus/exodus/libexodus/exodus/ioconv_custom.cpp"
//#ifndefEXODUS_CALLABLE_IOCONV_CUSTOM_H
#define EXODUS_CALLABLE_IOCONV_CUSTOM_H

// A 'callable' class and object that allows function call syntax to actually open shared libraries/create Exodus Program objects on the fly.

class Callable_ioconv_custom : public Callable
{
public:

// A constructor providing:
// 1. The name of the shared library to open,
// 2. The name of the function within the shared library that will create an exodus program object,
// 3. The current program's mv environment to share with it.
Callable_ioconv_custom(ExoEnv& mv) : Callable(mv) {}

// Allow assignment of library name to override the default constructed
using Callable::operator=;

// A callable member function with the right arguments, returning a var or void
var operator() (in type, in input, in mode, out output)
{

 // The first call will link to the shared lib and create/cache an object from it.
 // passing current standard variables in mv
 if (this->pmemberfunc_==NULL)
  this->attach("ioconv_custom");

 // Define a function type (pExodusProgramBaseMemberFunction)
 // that can call the shared library object member function
 // with the right arguments and returning a var or void
 using pExodusProgramBaseMemberFunction = auto (ExodusProgramBase::*)(in,in,in,out) -> var;

 // Call the shared library object main function with the right args,
 //  returning a var or void
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wcast-function-type"
 return CALLMEMBERFUNCTION(*(this->plibobject_),
 (reinterpret_cast<pExodusProgramBaseMemberFunction>(this->pmemberfunc_)))
  (type,input,mode,output);
 #pragma GCC diagnostic pop

}

// Allow call with only 0 args
var operator() () {
 var type_in;
 var input_in;
 var mode_in;
 var output_out;
 return operator()(type_in, input_in, mode_in, output_out);
}

// Allow call with only 1 arg
var operator() (in type) {
 var input_in;
 var mode_in;
 var output_out;
 return operator()(type, input_in, mode_in, output_out);
}

// Allow call with only 2 args
var operator() (in type, in input) {
 var mode_in;
 var output_out;
 return operator()(type, input, mode_in, output_out);
}

// Allow call with only 3 args
var operator() (in type, in input, in mode) {
 var output_out;
 return operator()(type, input, mode, output_out);
}

};

// A callable object of the above type that allows function call syntax to access
// an Exodus program/function initialized with the current mv environment.
Callable_ioconv_custom ioconv_custom{mv};
//#endif
