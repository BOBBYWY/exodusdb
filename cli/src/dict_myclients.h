//generated by exodus "compile dict_myclients"
//#ifndef EXODUSDLFUNC_DICT_MYCLIENTS_H
#define EXODUSDLFUNC_DICT_MYCLIENTS_H

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase Functordict_myclients;
class Functordict_myclients : public ExodusFunctorBase {
   public:
	Functordict_myclients(ExoEnv& mv)
		: ExodusFunctorBase("dict_myclients", "exodusprogrambasecreatedelete_", mv) {}

	Functordict_myclients& operator=(const var& newlibraryname) {
		closelib();
		libraryname_ = newlibraryname.toString();
		return (*this);
	}

	//a member function with the right arguments, returning a var or void
	var operator()() {

		//first time link to the shared lib and create/cache an object from it
		//passing current standard variables in mv
		//first time link to the shared lib and create/cache an object from it
		//passing current standard variables in mv
		//if (Functorgetlang.pmemberfunc_==NULL)
		// Functorgetlang.init("getlang","exodusprogrambasecreatedelete_",mv);
		if (this->pmemberfunc_ == NULL)
			this->init();

		//define a function type (pExodusProgramBaseMemberFunction)
		//that can call the shared library object member function
		//with the right arguments and returning a var or void
		//typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)();
		using pExodusProgramBaseMemberFunction = auto (ExodusProgramBase::*)() -> var;
		//call the shared library object main function with the right args,
		// returning a var or void
		//return CALLMEMBERFUNCTION(*(Functordict_myclients.plibobject_),
		//((pExodusProgramBaseMemberFunction) (Functordict_myclients.pmemberfunc_)))
		// (mode);
		return CALLMEMBERFUNCTION(*(this->plibobject_),
								  ((pExodusProgramBaseMemberFunction)(this->pmemberfunc_)))();
	}
};
Functordict_myclients dict_myclients{mv};

//a member variable/object to cache a pointer/object for the shared library function
//ExodusFunctorBase Functordict_myclients;
class Functordict_myclients : public ExodusFunctorBase {
   public:
	Functordict_myclients(ExoEnv& mv)
		: ExodusFunctorBase("dict_myclients", "exodusprogrambasecreatedelete_", mv) {}

	Functordict_myclients& operator=(const var& newlibraryname) {
		closelib();
		libraryname_ = newlibraryname.toString();
		return (*this);
	}

	//a member function with the right arguments, returning a var or void
	var operator()() {

		//first time link to the shared lib and create/cache an object from it
		//passing current standard variables in mv
		//first time link to the shared lib and create/cache an object from it
		//passing current standard variables in mv
		//if (Functorgetlang.pmemberfunc_==NULL)
		// Functorgetlang.init("getlang","exodusprogrambasecreatedelete_",mv);
		if (this->pmemberfunc_ == NULL)
			this->init();

		//define a function type (pExodusProgramBaseMemberFunction)
		//that can call the shared library object member function
		//with the right arguments and returning a var or void
		typedef var (ExodusProgramBase::*pExodusProgramBaseMemberFunction)();

		//call the shared library object main function with the right args,
		// returning a var or void
		//return CALLMEMBERFUNCTION(*(Functordict_myclients.plibobject_),
		//((pExodusProgramBaseMemberFunction) (Functordict_myclients.pmemberfunc_)))
		// (mode);
		return CALLMEMBERFUNCTION(*(this->plibobject_),
								  ((pExodusProgramBaseMemberFunction)(this->pmemberfunc_)))();
	}
};
Functordict_myclients dict_myclients{mv};
//#endif
